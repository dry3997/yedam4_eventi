<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eventi.left.likes.mapper.LikesMapper">
	<!-- 삭제조건에 userId가 있을 경우 -->
	<sql id="userIdSelect">
		<if test="userId !=null and userId != ''">
			AND USER_ID = #{userId}
		</if>
	</sql>
	

	<!-- 로그인회원의 공모전 좋아요 전체리스트 -->
	<!-- join map으로 받을경우, 컬럼명 대문자 인식!! -->
	<select id="userlikeList" resultType="map">
	 SELECT RN,c_no,writer,ttl,cntn,dt_reg,dt_cls,dt_extns,pay,inq,rprt
                ,dDay
                ,REPLACE(codeArr_select(style), ',', '#') style
                ,code_select(category) category
		      	,(select count(*) from likes where target_no = c_no) AS likes
		      	,(select sev_nm from files where target_Id = c_no) AS img
		      	,REGEXP_REPLACE(REVERSE(
                                    REGEXP_REPLACE(REVERSE(TO_CHAR(pay)), '(\d{3})','\1,')
                                ), '^,','') AS PAYCOMMA
	 FROM ( select ROWNUM RN, A.*
			        FROM(
				             SELECT c.c_no,c.writer,c.ttl,c.cntn,c.pay,c.inq,c.rprt,c.dt_reg,c.dt_cls,c.dt_extns,c.style,c.category
				                    , CASE WHEN c.dt_extns IS NOT NULL THEN (TO_DATE (c.dt_extns, 'YY/MM/DD')) - (TO_DATE (sysdate, 'YY/MM/DD')) 
				                                                ELSE (TO_DATE (c.dt_cls, 'YY/MM/DD')) - (TO_DATE (sysdate, 'YY/MM/DD'))
				                                                END AS dDay
						  	 FROM likes l JOIN CONTEST c
							              		 ON C.C_NO = L.TARGET_NO
							 and l.USER_ID = #{userId}
							 <![CDATA[ AND c.rprt < 5 ]]>
	<![CDATA[
	) A WHERE ROWNUM <= #{last}) WHERE RN >=#{first}
	]]>
	</select>
	
	<select  id="designlikeList" resultType="map">
		SELECT * FROM (SELECT ROWNUM RN, A.* FROM (
				SELECT d.dgn_no,d.user_id,d.c_no,name,d.cntn,d.win_yn,d.dt,d.pubc_yn,d.save
						,code_select(d.caregory)caregory,
	                    (select sev_nm 
	                      from files 
	                      where target_id = dgn_no
	                      and f_nm = center_img) AS center_img
				FROM design d join likes l
	                            on d.dgn_no = l.target_no
				AND SAVE = 'N'
				AND PUBC_YN = 'N'
	            AND L.USER_ID  = #{userId}
				ORDER BY DT DESC
		<![CDATA[
		) A WHERE ROWNUM <= #{last}) WHERE RN >=#{first}
		]]>
	</select>
	

	<select id="likeList" resultType="LikesVO">
		SELECT * FROM likes
	</select>
	
	<!-- 로그인회원의 게시글 좋아요 여부 확인 -->
	<select id="getLike" resultType="LikesVO">
		SELECT *
		FROM LIKES
		WHERE USER_ID = #{userId}
		AND TARGET_NO = #{targetNo}
	</select>
	
	<!-- 해당게시글 좋아요 건수 조회 -->
	<select id="countLike" resultType="int">
		SELECT COUNT(*) 
		FROM LIKES 
		WHERE TARGET_NO=#{targetNo}
	</select>
	
	<!-- 로그인회원의 좋아요 등록 -->
	<insert id="likeInsert">
		INSERT INTO LIKES
		VALUES('LI'||LIKENO_SEQ.NEXTVAL,
		#{userId}, #{targetNo}, #{category})
	</insert>

	<!-- 로그인회원의 좋아요 취소 -->
	<delete id="likeDelete">
		DELETE FROM LIKES
		WHERE TARGET_NO = #{targetNo}
		AND CATEGORY = #{category}
		<include refid="userIdSelect" />
	</delete>
	
	<!-- 게시글에 대한 로그인회원의 좋아요 확인 -->
	<select id="userlikecheck" resultType="int">
		select count(*)
		from likes
		where user_id = #{userId}
		and target_No = #{targetNo}
		and category = #{category}
	</select>
	
	<!-- 공모전에 대한 로그인회원의 좋아요 확인 -->
	<select id="setTotalRecord" resultType="int">
		SELECT COUNT(*)
		  FROM LIKES L JOIN CONTEST C
                    	ON L.TARGET_NO = C.C_NO
		  AND USER_ID = #{userId}
		  AND L.CATEGORY = #{category}
         <![CDATA[ AND rprt < 5 ]]>
	</select>
	
	<!-- 디자인에 대한 로그인회원의 좋아요 확인 -->
	<select id="setTotalRecordDesign" resultType="int">
		SELECT COUNT(*) 
		FROM LIKES L JOIN design d 
		            ON L.TARGET_NO = d.dgn_no
		AND PUBC_YN = 'N'
		AND l.USER_ID = #{userId}
		AND L.CATEGORY = #{category}
	</select>
	
</mapper>